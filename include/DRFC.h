/*    ========================================================================
    =                   Doosan Robot Framework Constant                       =
    =                   Copyright (c) Doosan Robotics.                        =   
    =_______________________________________________________________________  =
    = Title             : Doosan Robot Framwork Constant                      =
    = Author            : Lee Jeong-Woo<jeongwoo1.lee@doosan.com>             =
    = Description       : -                                                   =
    ======================================================================== */

/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2019, Doosan Robotics
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Georgia Institute of Technology nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

#pragma once

#ifndef TRUE
#define TRUE  1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#ifndef DEBUG
#define DEBUG 0
#endif

//
// Robot configuration constants
//

#define NUM_JOINT                (6)
#define NUMBER_OF_JOINT          (6)
#define NUM_TASK                 (6)
#define NUM_FLANGE_IO            (6)
#define NUM_BUTTON               (5)
#define NUM_BUTTON_EX            (6)
#define NUMBER_OF_TASK           (6)
#define NUMBER_OF_ITER_THRESHOULD           (2)

//
// string constants
//

#define MAX_STRING_SIZE             (256)
#define MAX_SYMBOL_SIZE             (32)

//
// I/O configuration constants
//

#define NUM_DIGITAL                 (16)
#define MAX_DIGITAL_BURST_SIZE      (16)
#define NUM_ANALOG                  (2)
#define NUM_SWITCH                  (3)
#define NUM_SAFETY_IN               (2)
#define NUM_ENCORDER                (2)
#define NUM_POWER_OUT               (1)
#define NUM_SAFETY                  (8)
#define NUMBER_OF_BUTTON            (6)

#define MAX_MODBUS_TOTAL_REGISTERS  (100)

#define MAX_MOVEB_POINT             (50)

#define MAX_SPLINE_POINT            (100)
#define MAX_SERIAL                  (32)

#define MAX_CONFIG_TCP_SIZE         (50)
#define MAX_CONFIG_TOOL_SIZE        (50)
#define IS_NEW_FLANGE_VERSION(f) ((f[3] > '1') && ((f[2] == '0') || (f[2] == '1')))

#define MIN_FLANGE_AI               2
#define MAX_FLANGE_AI               4

#define NUM_AXIS                 NUMBER_OF_JOINT
#define MAX_MODBUS_BURST_SIZE           32

#define MAX_USER_COORD_MONITORING_EXT_FORCE_SIZE  10
#define MAX_MODBUS_SLAVE_DEVICES        5
//#define MAX_MODBUS_REGISTER_PER_DEVICE  100
#define MAX_MODBUS_REGISTER_PER_DEVICE  50
#define MAX_MODBUS_SLAVE_TOTAL_GPR      128

#define NUM_REMOTE_CONTROL 8

static float COG_DEFAULT[3] = {0.0, 0.0, 0.0};
//
// robot state enumerated value
//
typedef enum {
    STATE_INITIALIZING,
    STATE_STANDBY,
    STATE_MOVING,
    STATE_SAFE_OFF,
    STATE_TEACHING,
    STATE_SAFE_STOP,
    STATE_EMERGENCY_STOP,
    STATE_HOMMING,
    STATE_RECOVERY,
    STATE_SAFE_STOP2,
    STATE_SAFE_OFF2,
    STATE_RESERVED1,
    STATE_RESERVED2,
    STATE_RESERVED3,
    STATE_RESERVED4,
    STATE_NOT_READY = 15,
    STATE_LAST,
} ROBOT_STATE;

//
// robot control enumerated value
//
typedef enum {
    CONTROL_INIT_CONFIG,
    CONTROL_ENABLE_OPERATION,
    CONTROL_RESET_SAFET_STOP,
    CONTROL_RESET_SAFE_STOP = CONTROL_RESET_SAFET_STOP,
    CONTROL_RESET_SAFET_OFF,
    CONTROL_RESET_SAFE_OFF = CONTROL_RESET_SAFET_OFF,
    CONTROL_SERVO_ON = CONTROL_RESET_SAFET_OFF,
    CONTROL_RECOVERY_SAFE_STOP,
    CONTROL_RECOVERY_SAFE_OFF,
    CONTROL_RECOVERY_BACKDRIVE,
    CONTROL_RESET_RECOVERY,
    CONTROL_LAST
} ROBOT_CONTROL;

//
// speed mode enumerated value
//
typedef enum {
    SPEED_NORMAL_MODE,
    SPEED_REDUCED_MODE
} MONITORING_SPEED;

typedef MONITORING_SPEED SPEED_MODE;
//
// robot system enumerated value
//
typedef enum {
    ROBOT_SYSTEM_REAL,
    ROBOT_SYSTEM_VIRTUAL,
    ROBOT_SYSTEM_LAST

} ROBOT_SYSTEM;

typedef enum
{
    UPDATE_TARGET_FIRST      = 0,
    UPDATE_TARGET_INVETER_1  = UPDATE_TARGET_FIRST,
    UPDATE_TARGET_INVETER_2  = 1,
    UPDATE_TARGET_INVETER_3  = 2,
    UPDATE_TARGET_INVETER_4  = 3,
    UPDATE_TARGET_INVETER_5  = 4,
    UPDATE_TARGET_INVETER_6  = 5,
    UPDATE_TARGET_INVETER_LAST = UPDATE_TARGET_INVETER_6,
    UPDATE_TARGET_SAFETYBD   = 6,
    UPDATE_TARGET_CONTROLLER = 7,
    UPDATE_TARGET_SVM        = 8,
    UPDATE_TARGET_LAST       = 9,
} UPDATE_TARGET;

typedef enum {
    ENCORDER_POLARITY_A,
    ENCORDER_POLARITY_B,
    ENCORDER_POLARITY_Z,
    ENCORDER_POLARITY_S,
    ENCORDER_POLARITY_LAST
} ENCORDER_POLARITY;


//
// robot mode enumerated value
//
typedef enum {
    ROBOT_MODE_MANUAL,
    ROBOT_MODE_AUTONOMOUS,
    ROBOT_MODE_RECOVERY,
    ROBOT_MODE_BACKDRIVE,
    ROBOT_MODE_MEASURE,
    ROBOT_MODE_INITIALIZE,
    ROBOT_MODE_LAST,
} ROBOT_MODE;

//
// get robot space enumerated value
//
typedef enum {
    ROBOT_SPACE_JOINT,
    ROBOT_SPACE_TASK,
} ROBOT_SPACE;


typedef enum {
    JOG_AXIS_JOINT_1 = 0,
    JOG_AXIS_JOINT_2,
    JOG_AXIS_JOINT_3, 
    JOG_AXIS_JOINT_4, 
    JOG_AXIS_JOINT_5, 
    JOG_AXIS_JOINT_6, 
    JOG_AXIS_TASK_X,
    JOG_AXIS_TASK_Y,
    JOG_AXIS_TASK_Z,
    JOG_AXIS_TASK_RX,
    JOG_AXIS_TASK_RY,
    JOG_AXIS_TASK_RZ,
} JOG_AXIS;

//
// motion command axis type enumerated value
//
typedef enum {
    JOINT_AXIS_1 = 0,
    JOINT_AXIS_2,
    JOINT_AXIS_3, 
    JOINT_AXIS_4, 
    JOINT_AXIS_5, 
    JOINT_AXIS_6, 

} JOINT_AXIS;

//
// motion command axis type enumerated value
//
typedef enum {
    TASK_AXIS_X = 0,
    TASK_AXIS_Y,
    TASK_AXIS_Z, 

} TASK_AXIS;

//
// reference coordinate enumerated value
//
typedef enum {
    COORDINATE_SYSTEM_BASE = 0,
    COORDINATE_SYSTEM_TOOL,
    COORDINATE_SYSTEM_WORLD,
    COORDINATE_SYSTEM_USER_MIN = 101,
    COORDINATE_SYSTEM_USER_MAX = 200,
} COORDINATE_SYSTEM;

//
// move command reference type enumerated value
//
typedef enum {
    MOVE_REFERENCE_BASE = COORDINATE_SYSTEM_BASE,
    MOVE_REFERENCE_TOOL = COORDINATE_SYSTEM_TOOL,
    MOVE_REFERENCE_WORLD = COORDINATE_SYSTEM_WORLD,
    MOVE_REFERENCE_USER_MIN = COORDINATE_SYSTEM_USER_MIN,
    MOVE_REFERENCE_USER_MAX = COORDINATE_SYSTEM_USER_MAX,
} MOVE_REFERENCE;

//
// move command mode type enumerated value
//
typedef enum {
    MOVE_MODE_ABSOLUTE = 0,
    MOVE_MODE_RELATIVE,
} MOVE_MODE;

//
// movec orientation value
//
typedef enum {
    DR_MV_ORI_TEACH,
    DR_MV_ORI_FIXED,
    DR_MV_ORI_RADIAL,
    DR_MV_ORI_INTENT,
} MOVE_ORIENTATION;

//
// spiral_dir value : inward / outward
//
typedef enum {
    DR_SPIRAL_OUTWARD,
    DR_SPIRAL_INWARD,
} SPIRAL_DIR;

//
// rot_dir value : FORWARD / REVERSE
//
typedef enum {
    DR_ROT_FORWARD,
    DR_ROT_REVERSE,
} ROT_DIR;

//

//
// alter motion path mode enumerated value
//
typedef enum {
    PATH_MODE_DPOS = 0,
    PATH_MODE_DVEL
} PATH_MODE;

//
// homming command mode type enumerated value
//
typedef enum {
    MOVE_HOME_MECHANIC,
    MOVE_HOME_USER
} MOVE_HOME;


typedef enum {
    CONTROL_MODE_POSITION = 3,
    CONTROL_MODE_TORQUE
} CONTROL_MODE;

typedef enum {
    SINGULARITY_AVOIDANCE_AVOID = 0,
    SINGULARITY_AVOIDANCE_STOP,
    SINGULARITY_AVOIDANCE_VEL,
}SINGULARITY_AVOIDANCE;

//
// blending speed type enumerated value
//
typedef enum {
    BLENDING_SPEED_TYPE_DUPLICATE = 0,
    BLENDING_SPEED_TYPE_OVERRIDE,

} BLENDING_SPEED_TYPE;

//
// servoj type enumerated value
//
typedef enum {
    DR_SERVO_OVERRIDE = 0,
    DR_SERVO_QUEUE = 1,
} DR_SERVOJ_TYPE;

//
// reset safety stop type enumerated value
//
typedef enum {
    SAFE_STOP_RESET_TYPE_DEFAULT = 0,
    SAFE_STOP_RESET_TYPE_PROGRAM_STOP = SAFE_STOP_RESET_TYPE_DEFAULT,
    SAFE_STOP_RESET_TYPE_PROGRAM_RESUME,

} SAFE_STOP_RESET_TYPE;

//
// acces control management enumerated value
//
typedef enum {
    MANAGE_ACCESS_CONTROL_FORCE_REQUEST,
    MANAGE_ACCESS_CONTROL_REQUEST,
    MANAGE_ACCESS_CONTROL_RESPONSE_YES,
    MANAGE_ACCESS_CONTROL_RESPONSE_NO,

} MANAGE_ACCESS_CONTROL;

//
// access control state enumerated value
//
typedef enum {
    MONITORING_ACCESS_CONTROL_REQUEST,
    MONITORING_ACCESS_CONTROL_DENY,                
    MONITORING_ACCESS_CONTROL_GRANT,
    MONITORING_ACCESS_CONTROL_LOSS,
    MONITORING_ACCESS_CONTROL_LAST

} MONITORING_ACCESS_CONTROL;

//
// motion stop typenumerated value
//
typedef enum {
    STOP_TYPE_QUICK_STO = 0,
    STOP_TYPE_QUICK,
    STOP_TYPE_SLOW,
    STOP_TYPE_HOLD,
    STOP_TYPE_EMERGENCY = STOP_TYPE_HOLD,

} STOP_TYPE;

//
// spline velocity option enumerated value
//
typedef enum {
    SPLINE_VELOCITY_OPTION_DEFAULT,
    SPLINE_VELOCITY_OPTION_CONST,

} SPLINE_VELOCITY_OPTION;

typedef enum{
    DATA_TYPE_BOOL = 0,
    DATA_TYPE_INT,
    DATA_TYPE_FLOAT,
    DATA_TYPE_STRING,
    DATA_TYPE_POSJ,
    DATA_TYPE_POSX,
    DATA_TYPE_UNKNOWN,
}DATA_TYPE;

typedef enum{
    VARIABLE_TYPE_INSTALL = 0,
    VARIABLE_TYPE_GLOBAL,    
}VARIABLE_TYPE;

typedef enum{
    SUB_PROGRAM_DELETE = 0,
    SUB_PROGRAM_SAVE,
} SUB_PROGRAM;
//
// gpio index enumerated value
//
typedef enum {
    GPIO_CTRLBOX_DIGITAL_INDEX_1= 0,
    GPIO_CTRLBOX_DIGITAL_INDEX_2,
    GPIO_CTRLBOX_DIGITAL_INDEX_3,
    GPIO_CTRLBOX_DIGITAL_INDEX_4,
    GPIO_CTRLBOX_DIGITAL_INDEX_5,
    GPIO_CTRLBOX_DIGITAL_INDEX_6,
    GPIO_CTRLBOX_DIGITAL_INDEX_7,
    GPIO_CTRLBOX_DIGITAL_INDEX_8,
    GPIO_CTRLBOX_DIGITAL_INDEX_9,
    GPIO_CTRLBOX_DIGITAL_INDEX_10,
    GPIO_CTRLBOX_DIGITAL_INDEX_11,
    GPIO_CTRLBOX_DIGITAL_INDEX_12,
    GPIO_CTRLBOX_DIGITAL_INDEX_13,
    GPIO_CTRLBOX_DIGITAL_INDEX_14,
    GPIO_CTRLBOX_DIGITAL_INDEX_15,
    GPIO_CTRLBOX_DIGITAL_INDEX_16,
} GPIO_CTRLBOX_DIGITAL_INDEX;

typedef enum {
    GPIO_CTRLBOX_ANALOG_INDEX_1 = 0,
    GPIO_CTRLBOX_ANALOG_INDEX_2,
} GPIO_CTRLBOX_ANALOG_INDEX;

typedef enum {
    GPIO_TOOL_ANALOG_INDEX_1 = 0,
    GPIO_TOOL_ANALOG_INDEX_2,
} GPIO_TOOL_ANALOG_INDEX;

typedef enum {
    GPIO_TOOL_DIGITAL_INDEX_1 = 0,
    GPIO_TOOL_DIGITAL_INDEX_2,
    GPIO_TOOL_DIGITAL_INDEX_3,
    GPIO_TOOL_DIGITAL_INDEX_4,
    GPIO_TOOL_DIGITAL_INDEX_5,
    GPIO_TOOL_DIGITAL_INDEX_6,
} GPIO_TOOL_DIGITAL_INDEX;

//
// program running state enumerated value
//
typedef enum {
    DRL_PROGRAM_STATE_PLAY,
    DRL_PROGRAM_STATE_STOP,
    DRL_PROGRAM_STATE_HOLD,
    DRL_PROGRAM_STATE_LAST
} DRL_PROGRAM_STATE;

// analog I/O type enumerated value
//
typedef enum {
    GPIO_ANALOG_TYPE_CURRENT = 0,
    GPIO_ANALOG_TYPE_VOLTAGE
} GPIO_ANALOG_TYPE;

// modbus registertype enumerated value
//
typedef enum {
    MODBUS_REGISTER_TYPE_DISCRETE_INPUTS = 0,
    MODBUS_REGISTER_TYPE_COILS,
    MODBUS_REGISTER_TYPE_INPUT_REGISTER,
    MODBUS_REGISTER_TYPE_HOLDING_REGISTER,
} MODBUS_REGISTER_TYPE;

//
// program response enumerated value
//
typedef enum {
    PROGRAM_STOP_CAUSE_NORMAL,
    PROGRAM_STOP_CAUSE_FORCE,        
    PROGRAM_STOP_CAUSE_ERROR,
    PROGRAM_STOP_CAUSE_LAST
} PROGRAM_STOP_CAUSE;

//
// MoveB blending type enumerated value
//

typedef enum {
    MOVEB_BLENDING_TYPE_LINE,
    MOVEB_BLENDING_TYPE_CIRLCE,
} MOVEB_BLENDING_TYPE;

//
// force command axis type enumerated value
//
typedef enum {
    FORCE_AXIS_X = 0,
    FORCE_AXIS_Y,
    FORCE_AXIS_Z, 
    FORCE_AXIS_A = 10,
    FORCE_AXIS_B,
    FORCE_AXIS_C,
} FORCE_AXIS;

//
// force control mode type enumerated value
//
typedef enum {
    FORCE_MODE_ABSOLUTE = 0,
    FORCE_MODE_RELATIVE,

} FORCE_MODE;

//
// log level enumerated value
//

typedef enum {    
    LOG_LEVEL_SYSINFO = 1,
    LOG_LEVEL_SYSWARN,
    LOG_LEVEL_SYSERROR,
    LOG_LEVEL_LAST
} LOG_LEVEL;

//
// log group enumerated value
//

typedef enum {
    LOG_GROUP_SYSTEMFMK = 1,
    LOG_GROUP_MOTIONLIB,
    LOG_GROUP_SMARTTP,
    LOG_GROUP_INVERTER,
    LOG_GROUP_SAFETYCONTROLLER,
    LOG_GROUP_LAST,

} LOG_GROUP;

typedef enum {
    MESSAGE_LEVEL_INFO,
    MESSAGE_LEVEL_WARN,
    MESSAGE_LEVEL_ALARM
} MESSAGE_LEVEL;

typedef enum {
    POPUP_RESPONSE_STOP,
    POPUP_RESPONSE_RESUME
}POPUP_RESPONSE;

typedef enum {
    ROBOT_AXIS_1 = 0,
    ROBOT_AXIS_2,
    ROBOT_AXIS_3,
    ROBOT_AXIS_4,
    ROBOT_AXIS_5,
    ROBOT_AXIS_6,
    ROBOT_AXIS_ALL
} ROBOT_AXIS;

typedef enum {
    BYTE_SIZE_FIVEBITES = 5,
    BYTE_SIZE_SIXBITS,
    BYTE_SIZE_SEVENBITS,
    BYTE_SIZE_EIGHTBITS
}BYTE_SIZE;

typedef enum {
    STOPBITS_ONE = 1,
    STOPBITS_TWO
} STOP_BITS;

typedef enum {
    PARITY_CHECK_NONE = 0,
    PARITY_CHECK_EVEN,
    PARITY_CHECK_ODD
} PARITY_CHECK;

typedef enum {
    RELEASE_MODE_STOP = 0,
    RELEASE_MODE_RESUME,
    RELEASE_MODE_RELEASE,
    RELEASE_MODE_RESET
} RELEASE_MODE;

//
// I/O direction enumerated value
//
enum {
    TYPE_INPUT = 0,
    TYPE_OUTPUT,
    TYPE_LAST,
};

typedef enum{
    COG_REFERENCE_TCP = 0,
    COG_REFERENCE_FLANGE,
} COG_REFERENCE;

typedef enum{
    ADD_UP_REPLACE = 0,
    ADD_UP_ADD,
    ADD_UP_REMOVE,
} ADD_UP;

typedef enum{
    OUTPUT_TYPE_PNP = 0,
    OUTPUT_TYPE_NPN,
} OUTPUT_TYPE;

//
// safety mode enumerated value
//
typedef enum {
    SAFETY_MODE_MANUAL,
    SAFETY_MODE_AUTONOMOUS,
    SAFETY_MODE_RECOVERY,
    SAFETY_MODE_BACKDRIVE,
    SAFETY_MODE_MEASURE,
    SAFETY_MODE_INITIALIZE,
    SAFETY_MODE_LAST,

} SAFETY_MODE;

//
// safety state enumerated value
//
typedef enum {
    SAFETY_STATE_BP_START, /* boot-up start*/
    SAFETY_STATE_BP_INIT,  /* boot-up init(config) */
    SAFETY_STATE_VD_STO,   /* violation detected STO */
    SAFETY_STATE_VD_SOS,   /* violation decteded SOS */
    SAFETY_STATE_JH_SOS,   /* jog & homming SOS */
    SAFETY_STATE_JH_MOVE,  /* jog & homming MOVE */
    SAFETY_STATE_HG_MOVE,  /* hand guiding MOVE */
    SAFETY_STATE_RV_SOS,   /* recovery SOS */
    SAFETY_STATE_RV_MOVE,  /* recovery MOVE */
    SAFETY_STATE_RV_BACK,  /* recovery BackDrive */
    SAFETY_STATE_RV_HG_MOVE, /* recovery hand guiding move */
    SAFETY_STATE_SW_SOS,   /* standalone workspace SOS */
    SAFETY_STATE_SW_RUN,   /* standalone workspace RUN */
    SAFETY_STATE_CW_SOS,   /* collaborative workspace SOS */
    SAFETY_STATE_CW_RUN,   /* collaborative workspace RUN */
    SAFETY_STATE_CM_RUN,   /* collision mute RUN */
    SAFETY_STATE_AM_RUN,   /* auto-measure RUN */
    SAFETY_STATE_DRL_JH_SOS,   /* jog & homming SOS */
    SAFETY_STATE_DRL_HG_MOVE,  /* hand guiding MOVE */
    SAFETY_STATE_LAST
} SAFETY_STATE;

//
// safety function error enumerated value
//

typedef enum {
    SAFETY_FUNC_FIRST,
    SAFETY_FUNC_STOP_STO_NOT_USE = SAFETY_FUNC_FIRST,
    SAFETY_FUNC_STOP_SBC_NOT_USE,
    SAFETY_FUNC_STOP_SS1_NOT_USE,
    SAFETY_FUNC_STOP_SS2_NOT_USE,
    SAFETY_FUNC_SIGNAL_EMG,
    SAFETY_FUNC_SIGNAL_PRS,
    SAFETY_FUNC_ERROR_SOS,
    SAFETY_FUNC_ERROR_JOINT_SLP, /* joint position */
    SAFETY_FUNC_ERROR_JOINT_SLS, /* joint speed */
    SAFETY_FUNC_ERROR_JOINT_SLT, /* joint torque */
    SAFETY_FUNC_ERROR_COLLISION,
    SAFETY_FUNC_ERROR_TCP_SLP,  /* tcp position */
    SAFETY_FUNC_ERROR_TCP_SLO,  /* tcp orientation */
    SAFETY_FUNC_ERROR_TCP_SLS,  /* tcp speed */
    SAFETY_FUNC_ERROR_TCP_SLF,  /* tcp force */
    SAFETY_FUNC_ERROR_MOMENTUM,
    SAFETY_FUNC_ERROR_POWER,
    SAFETY_FUNC_LAST,
    SAFETY_FUNC_ENABLE_SWITCH_RELEASE = SAFETY_FUNC_LAST
} SAFETY_FUNC;

typedef SAFETY_FUNC SAFETY_FUNC_ERROR;

//
// safety event enumerated value
//
typedef enum {
    SAFETY_MODE_EVENT_ENTER,
    SAFETY_MODE_EVENT_MOVE,
    SAFETY_MODE_EVENT_STOP,
    SAFETY_MODE_EVENT_LAST,
} SAFETY_MODE_EVENT;

//
// log code(eLOG_GROUP_SYSTEMFMK) enumerated value
//

enum {
    // eLOG_GROUP_SYSTEMFMK(SYSTEM)

    OPERATION_FRAMEWORK_START = 1000,
    OPERATION_FRAMEWORK_START_FAILED,
    OPERATION_FRAMEWORK_STOP,
    /*DEL*/OPERATION_SYSTEMCONFIG_TAST_START,
    /*DEL*/OPERATION_USROPERATION_TASK_START,
    /*DEL*/OPERATION_DEVOPERATION_TASK_START,
    /*DEL*/OPERATION_ROBOTICSCONTROL_TASK_START,
    /*DEL*/OPERATION_ROBOTICSCONTROL_TASK_STOP,
    /*DEL*/OPERATION_DEVOPERATION_TASK_STOP,
    /*DEL*/OPERATION_USROPERATION_TASK_STOP,
    /*DEL*/OPERATION_SYSTEMCONFIG_TAST_STOP,
    COMMAND_SYSTEM_SHUTDOWN,
    COMMAND_SYSTEM_RESTART,
    COMMAND_SET_TIME,
    COMMAND_SET_IPADDRESS,
    COMMAND_UNSUPPORTED_PROTOCOL,
    /*DEL*/COMMAND_SAVE_CONFIG,
    OPERATION_CONFIG_LOAD_FAIL,
    OPERATION_SYSTEM_STATE_CHANGED,
    OPERATION_3STATESWITCH_RELEASED,
    OPERATION_HOMMING_COMPLETED,
    OPERATION_NOT_EXIT_SAME_TCPNAME,
    OPERATION_NOT_EXIT_SAME_TOOLNAME,
    OPERATION_EXTERNAL_STO_SINNAL_INPUTED,
    OPERATION_EXTERNAL_EMG_SINNAL_INPUTED,
    OPERATION_EXTERNAL_PRS_SINNAL_INPUTED,
    OPERATION_EXTERNAL_REDUCED_SPEED_MODE_SINNAL_INPUTED,
    OPERATION_COLLISION_DETECTION_STOP_FAIL,
    OPERATION_COLLISION_DETECTION_RESTART,
    OPERATION_RECOVERY_MODE_FORCE_START,
    OPERATION_CONFIG_FILE_NAME_EMPTY,
    OPERATION_TOOL_NAME_EXCEED_MAX_NUMBER,
    OPERATION_TCP_NAME_EXCCED_MAX_NUMBER,
    OPERATION_CONFIG_TOOL_FAIL,
    OPERATION_CONFIG_TCP_FAIL,
    OPERATION_EXTERNAL_DIRECT_TEACH_MODE_SINNAL_INPUTED,
    OPERATION_EXTERNAL_MANUAL_GUIDE_STOP_SINNAL_INPUTED,
    OPERATION_MASTERING_PROCESS_NEEDED,
    OPERATION_SYSTEM_IDLE_OFF,
    OPERATION_EXTERNAL_PROTECTIVE_STOP_AUTO_RESUME_SINNAL_INPUTED,
    OPERATION_REMOTE_CONTROL_MODE_SINNAL_INPUTED,
    OPERATION_SYSTEM_NOT_HAVE_CONTROL_AUTH,
    OPERATION_REMOTE_CONTROL_SETTING_NOT_ENABLED,
    OPERATION_REMOTE_CONTROL_IO_SIGNAL_OVERLAPED,
    OPERATION_REMOTE_CONTROL_IO_SINGNAL_INPUTED,
    OPERATION_REMOTE_CONTROL_IO_SINGNAL_INGNORED,
    OPERATION_REMOTE_CONTROL_MODE_SINNAL_RELEASED,
    OPERATION_CONFIG_USER_HOME_FAIL,
    OPERATION_CONFIG_CRC_CHECK_FAIL,
    OPERATION_IS_NOT_HANDGUIDE_CONDITION,
    OPERATION_EXTERNAL_RESUME_SINNAL_INPUTED,
    OPERATION_EXTERNAL_RESET_SINNAL_INPUTED,
    OPERATION_INTERNAL_PRS_SINNAL_INPUTED,

    //eLOG_GROUP_SYSTEMFMK(INTERPRET)

    /*DEL*/COMMAND_SAVE_PROGRAM = 2000,
    /*DEL*/COMMAND_DELETE_PROGRAM,
    COMMAND_RUN_PROGRAM,
    OPERATION_ALREADY_RUN_PROGRAM,
    COMMAND_STOP_PROGRAM,
    COMMAND_PAUSE_PROGRAM,
    COMMAND_RESUME_PROGRAM,

    OPERATION_PROGRAM_NORMAL_STOP,           
    OPERATION_PROGRAM_FORCED_STOP,             
    OPERATION_PROGRAM_FORCED_ERROR_STOP,      

    OPERATION_PROGRAM_SW_ERROR,               
    OPERATION_PROGRAM_INTERNAL_ERROR,      
    OPERATION_PROGRAM_INIT_ERROR,             
    OPERATION_PROGRAM_EMPTY_SCRIPT,            

    OPERATION_PROGRAM_RUNTIME_ERROR_START,
    OPERATION_PROGRAM_SYNTAX_EXCEPTION = OPERATION_PROGRAM_RUNTIME_ERROR_START,

    OPERATION_PROGRAM_SYNTAX_ERROR,           
    OPERATION_PROGRAM_RUNTIME_TYPE_ERROR,   
    OPERATION_PROGRAM_RUNTIME_VALUE_ERROR,    
    OPERATION_PROGRAM_RUNTIME_RUNTIME_ERROR,  
    OPERATION_PROGRAM_RUNTIME_EXCEPTION,

    OPERATION_PROGRAM_RUNTIME_SVM, 
    OPERATION_PROGRAM_RUNTIME_ERROR_END = OPERATION_PROGRAM_RUNTIME_SVM,

    OPERATION_SERVER_START = 3000,
    OPERATION_SERVER_STOP,
    OPERATION_CLIENT_CONNECTED,
    OPERATION_CLIENT_DISCONNECTED,
    OPERATION_CLIENT_AUTHENTIFICATION_FAIL,
    OPERATION_UNKNOWN_CLIENT_CONNECTED,
    OPERATION_SEND_QUEUE_OVERFLOW,
    OPERATION_SEND_COMMAND_FAIL,
    OPERATION_GET_IP_ADDRESS_FAIL,
    OPERATION_RECV_QUEUE_OVERFLOW,
    OPERATION_KT_CONNECT_FAIL,
    OPERATION_KT_AUTH_FAIL,
    OPERATION_SET_IP_ADDRESS_FAIL,
    OPERATION_RTSERVER_INFO,
    OPERATION_RTSERVER_WARNING,

    /* internal user */
    OPERATION_CLIENT_AUTHENTIFICATION_COMPLETED = 3100,
    OPERATION_KT_TRY_CONNECT,
    OPERATION_KT_CONNECTED,
    OPERATION_KT_DISCONNECTED,
    OPERATION_KT_AUTHENTIFICATION_COMPLETED,


    //eLog_GROUP_SYSTEMFMK(ETHERCAT)

    /* EtherCAT Master Error Code */
    OPERATION_ECAT_MASTER_INIT_FAILED = 4000,
    OPERATION_ECAT_INVALID_SLAVE_TYPE,
    OPERATION_ECAT_JOBTASK_INIT_FAILED,
    OPERATION_ECAT_INVALID_ENI_FILE,
    OPERATION_ECAT_DC_NOT_SUPPORTED,
    OPERATION_ECAT_DC_INIT_FAILED,
    OPERATION_ECAT_REG_NOTIFY_CALLBACK_FAILED,
    OPERATION_ECAT_INVALID_VENDOR_PRODUCT_CODE,
    OPERATION_ECAT_CHANGE_INIT_STAT_FAILED,
    OPERATION_ECAT_CHANGE_PREOP_STAT_FAILED,
    OPERATION_ECAT_SLAVE_CONFIG_FAILED,
    OPERATION_ECAT_CONFIG_PDO_FAILED,
    OPERATION_ECAT_CHANGE_SAFEOP_STAT_FAILED,
    OPERATION_ECAT_GET_DCM_STATE_FAILED,
    OPERATION_ECAT_CHANGE_OP_STAT_FAILED,
    OPERATION_ECAT_MASTER_STOP_FAILED,
    OPERATION_ECAT_UNREG_NOTIFY_CALLBACK_FAILED,
    OPERATION_ECAT_MASTER_RELEASE_FAILED,
    OPERATION_ECAT_CHANGE_BOOTSTRAP_FAILED,
    OPERATION_ECAT_OPEN_UPDATE_FILE_FAILED,
    OPERATION_ECAT_INVERTER_UPDATE_FAILED,
    OPERATION_ECAT_INVALID_UPDATE_FILE,
    OPERATION_ECAT_JOBTASK_RECV_RXFRAME_FAILED,
    OPERATION_ECAT_JOBTASK_SEND_CYCFRAME_FAILED,
    OPERATION_ECAT_JOBTASK_DC_SYNC_FAILED,
    OPERATION_ECAT_JOBTASK_SEND_ACYCFRAME_FAILED,
    OPERATION_ECAT_NOTIFY_ERROR,

    //eLOG_GROUP_SYSTEMFMK(SERIAL)

    OPERATION_SERIAL_CONNECT_SUCCESS = 5000,
    OPERATION_SERIAL_CONNECT_FAIL,
    OPERATION_SERIAL_DISCONNECT,
    OPERATION_READ_SERIAL_FAIL,
    OPERATION_READ_SERIAL_TIMEOUT = OPERATION_READ_SERIAL_FAIL,
    OPERATION_WRITE_SERIAL_FAIL,
    OPERATION_READ_CRC_ERROR,
    OPERATION_UNSUPPORTED_PROTOCOL,
    /*DEL*/COMMAND_SETVAULE_DIGITAL,
    /*DEL*/COMMAND_SETVAULE_ANALOG,
    /*DEL*/COMMAND_SETVAULE_SAFTEY,
    /*DEL*/COMMAND_SETTYPE_ANALOG_INPUT,
    /*DEL*/COMMAND_SETTYPE_ANALOG_OUTPUT,
    /*DEL*/COMMAND_SETVALUE_DATA_PERIOD,
    OPERATION_OUTOFRANGE_GPIO,
    OPERATION_READ_SEQUENCE_ERROOR,

    //eLOG_GROUP_SYSTEMFMK(MODBUS)

    OPERATION_MODBUS_CONNECT_SUCCESS = 6000,
    OPERATION_MODBUS_CONNECT_FAIL,
    /*DEL*/COMMAND_ADDVARIABLE,
    OPERATION_EXIST_SAME_REGADDRESS,
    OPERATION_ADDVARIABLE_FAIL,
    /*DEL*/COMMAND_DELVARIABLE,
    OPERATION_NOT_EXIST_SAME_NAME,
    /*DEL*/COMMAND_SETVARIABLE,
    OPERATION_DELVARIABLE_FAIL,
    OPERATION_SETVARIABLE_FAIL,
    OPERATION_MODBUS_SLAVE_EXCEED_MAX_NUMBER,
    OPERATION_MODBUS_REGISTER_EXCEED_MAX_NUMBER,
    /*DEL*/OPERATION_MODBUS_LOAD_MODULE_FAIL,
    OPERATION_GETVARIABLE_FAIL,
    OPERATION_EXIST_SAME_NAME,
};

//
// log code(eLOG_GROUP_MOTIONLIB) enumerated value
//

enum {
    
    RC_ERROR_NO_ERROR                               = 0, 

	// InputError
	RC_ERROR_INPUT_TOOL_WEIGHT                      = 1101, 
	RC_ERROR_INPUT_TCP                              = 1102,     
	RC_ERROR_INPUT_JNT_LIMIT_SET                    = 1103, 
	RC_ERROR_INPUT_TCP_CONSTRAINED_MOVE_RXRYRZ      = 1104, 
	RC_ERROR_INPUT_INVALID_INSTALL_POSE				= 1105, //180724
	RC_ERROR_INPUT_INVALID_TOOL_ESTIMATION 			= 1106, //181002
	RC_ERROR_USERCOORD_INVALID_INPUT 				= 1107,
	RC_ERROR_USERCOORD_EXCEED_MAX_NUM 				= 1108,
	RC_ERROR_USERCOORD							= 1109,
	RC_ERROR_INPUT_TCP_INFO                         = 1110,
	RC_ERROR_INPUT_TOOL_WEIGHT_COG_INFO             = 1111,
	RC_ERROR_INPUT_WORKPIECE_WEIGHT                 = 1112,



	RC_ERROR_INPUT_NOT_ENOUGH_VIA_POINT_NUM         = 1201, 
	RC_ERROR_INPUT_UNEXPECTED_NEW_MTN_CMD           = 1202, 
	RC_ERROR_INPUT_UNEXPECTED_NEW_MTN_CMD_BLENDING  = 1203, 
	RC_ERROR_INPUT_CIRC_MTN_CMD                     = 1204, 
	RC_ERROR_INPUT_BLENDING_RAD                     = 1205, 
	RC_ERROR_INPUT_OUT_OF_WORKSPACE_CMD             = 1206, 
	RC_ERROR_INPUT_OUT_OF_USER_JOINT_LIMIT          = 1207, 
	RC_ERROR_INPUT_OUT_OF_USER_JVEL_LIMIT           = 1208, 
	RC_ERROR_INPUT_OUT_OF_USER_TVEL_LIMIT           = 1209, 
	RC_ERROR_INPUT_UNEXPECTED_TARGET_AXIS           = 1210, 
	RC_ERROR_INPUT_UNEXPECTED_TARGET_TIME           = 1211, 
	RC_ERROR_INPUT_OUT_OF_TARGET_TIME_LIMIT         = 1212,
	RC_ERROR_ALTER_INPUT_PARM						= 1213,
	RC_ERROR_INPUT_OUT_OF_TARGET_TIME_LIMIT_INFO    = 1214,
	RC_ERROR_INPUT_NOT_VALID_MTN_PARAM				= 1218, //180117

	RC_ERROR_INPUT_PARALLEL_AXIS                    = 1301, 
	RC_ERROR_INPUT_ALIGN_AXIS                       = 1302, 

	RC_ERROR_CONVEYOR_NAME                          = 1303, //181206
	RC_ERROR_CONVEYOR_ID                            = 1304, //181127 conveyor
	RC_ERROR_CONVEYOR_INPUT_MOTION_MOD				= 1305, //181127 conveyor
	RC_ERROR_CONVEYOR_INPUT_COMMAND					= 1306, //181127 conveyor
	RC_ERROR_CONVEYOR_INVALID_SETTING_INPUT			= 1307, //190828 conveyor

	RC_ERROR_INPUT_INCORRECT_POSITION_MAX_MIN       = 1401, 
	RC_ERROR_INPUT_INCORRECT_FORCE_MAX_MIN          = 1402, 

	RC_ERROR_EST_INSTALL_POSE                       = 1501,	//180724
#ifdef RC_ERROR_V24
	RC_ERROR_INPUT_INVALID_PROTECTZONE              = 1502,
	RC_ERROR_INPUT_INVALID_COLLISION_MUTE_ZONE      = 1503,
	RC_ERROR_INPUT_INVALID_TOOL_ANGLE_LIMIT_ZONE    = 1504,
	RC_ERROR_INPUT_INVALID_TOOL_SHAPE               = 1505,
	RC_ERROR_INPUT_INVALID_ROBOT_SHAPE              = 1506,
	RC_ERROR_INPUT_INVALID_SAFE_ZONE                = 1507,
#endif
#ifdef _UNIFY_SAFETY_ZONE
    RC_ERROR_FAILED_TO_ADD_SAFETY_ZONE              = 1508,
    RC_ERROR_FAILED_TO_DELETE_SAFETY_ZONE           = 1509,
#endif

	RC_ERROR_INPUT_VIRTUAL_FENCE_SETTING            = 1601, 
	RC_ERROR_LIMIT_MAX_TCP_POSITON_VF               = 1602, 
	RC_ERROR_INPUT_MIN_VALUE_VF                     = 1603, 

	RC_ERROR_DRCL_STATE_INVALID_EVENT               = 1903, 
	RC_ERROR_MATH_CALCULATION                       = 1904,

	RC_ERROR_INPUT_CONFIG_NUDGE						= 1905,	// NUDGE (180905)
	RC_ERROR_INCORRECT_REQUEST_NUDGE				= 1906, // NUDGE (180905)

	RC_ERROR_INPUT_REF_COORDINATE					= 1907,	//181121

	RC_ERROR_INPUT_INVALID_CONTROL_CMD				= 1908, // Invalid Contorl -> Inverter Command
	RC_ERROR_JTS_CALIBRATION_OUT_OF_RANGE				= 2301, // 210512_YLKim_Addition of Error Code
	RC_ERROR_FTS_CALIBRATION_OUT_OF_RANGE				= 2302, // 210512_YLKim_Addition of Error Code

	RC_ERROR_LIMIT_MAX_UCPOSITON                    = 2501, 
	RC_ERROR_LIMIT_MAX_UCVELOCITY                   = 2502, 
	RC_ERROR_LIMIT_MAX_JTS                          = 2503, 
	RC_ERROR_LIMIT_MAX_POWER                        = 2504, 
	RC_ERROR_LIMIT_MAX_FORCE                        = 2505, 
	RC_ERROR_LIMIT_MAX_MOMENTUM                     = 2506, 
	RC_ERROR_LIMIT_MAX_SPEED                        = 2507, 

	RC_ERROR_ALTER_INVALID_MOTIONSTATUS				= 3202,
	RC_ERROR_ALTER_MOTIONREPLANNING_USING_LIMIT_VALUE = 3203,
	RC_ERROR_ALTER_TERMINATE_BASIC_MOTION			= 3204,

	RC_ERROR_MOVESX_CONSTANT_SPD_UNAVAILABLE        = 3213,   
	RC_ERROR_JOG_JNT_LIMIT                          = 3215, 
	RC_ERROR_JOG_TSK_LIMIT                          = 3216, 
	RC_ERROR_JOG_SINGULARITY                        = 3217, 

#ifdef RC_ERROR_V24
    RC_ERROR_APP_AUTOTOOLMEASURE_SINGULARITY		= 3301,     
#endif

	RC_ERROR_CONVEYOR_VELOCITY                      = 3302, //181127 conveyor
	RC_ERROR_CONVEYOR_TRACKING_SYNC_IN              = 3303, //181127 conveyor
	RC_ERROR_CONVEYOR_TRACKING_SYNC_OUT             = 3304, //181127 conveyor
	RC_ERROR_CONVEYOR_TRACKING_PAUSE_REQUEST		= 3305, //190513 CONVEYOR


	RC_ERROR_MTN_COMPLIANCE_SINGULARITY             = 3403, 
	RC_ERROR_INCORRECT_FORCE_RESET					= 3404, //190513 FORCE_RESET


    //RC_ERROR_SYSTEM_JTS_VALUE_COLLISION             = 3501,	//180719 ??????????
	RC_ERROR_SYSTEM_EXTERNER_JOINT_VALUE			= 3501,
    RC_ERROR_SYSTEM_JTS_VALUE_VF                    = 3502, 
    RC_ERROR_SYSTEM_JTS_VALUE_COMP_CTRL             = 3503,
	//												  3504 // RESERVED
    RC_ERROR_SYSTEM_JTS_VALUE_AUTO_COMPENSATION     = 3505, 
	RC_ERROR_SYSTEM_JTS_VALUE_TEACHING_CTRL         = 3506,    
    RC_ERROR_SYSTEM_JTS_CAL                         = 3507, 
	RC_ERROR_FLOAT_COLLISION_DIST_LIMIT				= 3508, //180820
    RC_ERROR_MTN_SINGULARITY                        = 3509,
    RC_ERROR_LIMIT_MAX_TARGET_JOINT_VELOCITY        = 3510,

	//												  3901 // RESERVED
    RC_ERROR_CALC_INVERSE_KINEMATICS                = 3905,

	//RC_ERROR_SYSTEM_JTS_VALUE_BOOT				= 4501, //180719 ??????

    RC_ERROR_SYSTEM_JTS_VALUE                       = 4508,
	RC_ERROR_HW_FTS_LIMIT							= 4901,
	//												  5902 // RESERVED
	//												  6104 // RESERVED
	RC_ERROR_APP_FAIL_JTS_CALIBRATION				= 6301,
	RC_ERROR_APP_FAIL_MEASURE_INSTALLPOSE			= 6302,
	RC_ERROR_APP_FAIL_MEASURE_TOOL_INFO				= 6303,
	RC_ERROR_APP_FAIL_MEASURE_TCP					= 6304,
	
	// Safety Violation Error    
	RC_ERROR_SAFETY_STO                             = 9001,
	RC_ERROR_SAFETY_SBC                             = 9002,
	RC_ERROR_SAFETY_SS1                             = 9003,
	RC_ERROR_SAFETY_SS2                             = 9004,
	RC_ERROR_SAFETY_EMG                             = 9005,
	RC_ERROR_SAFETY_PRS                             = 9006,
	RC_ERROR_SAFETY_SOS                             = 9007,
	RC_ERROR_SAFETY_JOINT_SLP                       = 9008, /* joint position */
	RC_ERROR_SAFETY_JOINT_SLS                       = 9009, /* joint speed */
	RC_ERROR_SAFETY_JOINT_SLT                       = 9010, /* joint torque */
	RC_ERROR_SAFETY_COLLISION                       = 9011,
	RC_ERROR_SAFETY_TCP_SLP                         = 9012,  /* tcp position */
	RC_ERROR_SAFETY_TCP_SLO                         = 9013,  /* tcp orientation */
	RC_ERROR_SAFETY_TCP_SLS                         = 9014,  /* tcp speed */
	RC_ERROR_SAFETY_TCP_SLF                         = 9015,  /* tcp force */
	RC_ERROR_SAFETY_MOMENTUM                        = 9016,
	RC_ERROR_SAFETY_POWER                           = 9017,	
	RC_ERROR_SAFETY_ENABLE_SWITCH_RELEASE           = 9018,
	RC_ERROR_SAFETY_NUDGE_INPUT                     = 9019,

	RC_ERROR_MANUAL_GUIDING_SAFETY					= 9301, //180212

	RC_ERROR_FORCE_INPUT							= 9401,

	RC_ERROR_WELDING_INPUT_PARAM					= 1308, //M2.6
	RC_ERROR_WELDING_WEAVE_FUNC						= 3306, //M2.6 
	RC_ERROR_WELDING_WELD_PROCESS					= 3307, //M2.6 	
	RC_ERROR_WELDING_WEAVE_FUNC_INFO				= 3308, //M2.6 
	RC_ERROR_WELDING_WELD_PROCESS_INFO				= 3309, //M2.6 

	RC_ERROR_INSIDE_SINGULARITY_REGION              = 3205, //V2.6.2
	RC_ERROR_OUTSIDE_SINGULARITY_REGION             = 3206, //V2.6.2

    RC_ERROR_ZONE_COLLISIONCHECK_IN_VIRTUALMODE     = 3207, //V2.6.3
    RC_ERROR_ZONE_NOT_COLLISIONCHECK_IN_VIRTUALMODE = 3208, //V2.6.3

    RC_ERROR_PALLETIZINGMODE                        = 3209, //V2.7
};

//
// log code(eLOG_GROUP_INVERTER) enumerated value
//

enum {
    /* Inverter Fault Code */
    OPERATION_INVT_NO_ERROR = 1000,
    OPERATION_INVT_UNKNOWN_ERROR,
    OPERATION_INVT_SDO_COMM_ERROR,
    OPERATION_INVT_OVER_CURRENT_ERROR,              // 0x2310
    OPERATION_INVT_OVER_VOLTAGE_ERROR,              // 0x3210
    OPERATION_INVT_UNDER_VOLTAGE_ERROR,             // 0x3220
    OPERATION_INVT_OVER_TEMPERATURE_ERROR,          // 0x4210
    OPERATION_INVT_UNDER_TEMPERATURE_ERROR,         // 0x4220
    OPERATION_INVT_SUPPLY_24V_LOW_VOLTAGE_ERROR,    // 0x5112
    OPERATION_INVT_SUPPLY_5V_LOW_VOLTAGE_ERROR,     // 0x5113
    OPERATION_INVT_SUPPLY_17V_LOW_VOLTAGE_ERROR,    // 0x5114
    OPERATION_INVT_SUPPLY_24BRK_LOW_VOLTAGE_ERROR,  // 0x5115
    OPERATION_INVT_SUPPLY_DSPIO_VOLTAGE_ERROR,      // 0x5116
    OPERATION_INVT_SUPPLY_CORE_VOLTAGE_ERROR,       // 0x5117
    OPERATION_INVT_CURRENT_OFFSET_ERROR,            // 0x7280
    OPERATION_INVT_INCREMENTAL_SENSOR_ERROR,        // 0x7305
    OPERATION_INVT_ABSENCODER_MULT_ERROR,           // 0x7306
    OPERATION_INVT_ABSENCODER_CRC_ERROR,            // 0x7307
    OPERATION_INVT_OVER_SPEED_ERROR,                // 0x7310
    OPERATION_INVT_POSTIION_LIMIT_ERROR,            // 0x7320
    OPERATION_INVT_HALL_SENSOR_ERROR,               // 0x7388
    OPERATION_INVT_HALL_ANGLE_DETECTION_ERROR,      // 0x7389
    OPERATION_INVT_ETHERCAT_COMM_ERROR,             // 0x8100
    OPERATION_INVT_HEARTBEAT_ERROR,                 // 0x8130
    OPERATION_INVT_DIFFICULT_START_UP_ERROR,        // 0x8312
    OPERATION_INVT_POSITION_FOLLOWING_ERROR,        // 0x8611
    OPERATION_INVT_POSITION_REFERENCE_LIMIT_ERROR,  // 0x8612
    OPERATION_INVT_STO_ERROR,                       // 0x8a88
    OPERATION_INVT_EXTERNAL_ERROR,                  // 0x9000
    OPERATION_INVT_JOINT_TORQUE_SENSOR_LIMIT,       // 0xFF01
    OPERATION_INVT_OVERLOAD_ERROR,                  // 0xFF02
    OPERATION_INVT_HW_OVER_CURRENT_SHORT_ERROR,     // 0xFF05
    OPERATION_INVT_BRAKE_ERROR,                     // 0xFF06
    OPERATION_INVT_POSITION_SENSOR_INDEX_ERROR,     // 0xFF07
    OPERATION_INVT_POSITION_SENSOR_PULSE_ERROR,     // 0xFF08
    OPERATION_INVT_CONTROLBOARD_TYPE_ERROR,         // 0xFF09
    OPERATION_INVT_HARMONICDRIVE_TYPE_ERROR,        // 0xFF0A
    OPERATION_INVT_EEPROM_ERROR,                    // 0xFF0B
    OPERATION_INVT_PRECHARGE_ERROR,                 // 0xFF0C
    OPERATION_INVT_JOINT_TORQUE_SENSOR_LIMIT_1,     // 0xFF0D
    OPERATION_INVT_JOINT_TORQUE_SENSOR_LIMIT_2,     // 0xFF0E
    OPERATION_INVT_JOINT_TORQUE_SENSOR_COMPARE,     // 0xFF0F
    OPERATION_INVT_JOINT_TORQUE_SENSOR_RAPID_CHANGE,    // 0xFF10
    OPERATION_INVT_JOINT_TORQUE_SENSOR_NOT_CHANGE_1,    // 0xFF11
    OPERATION_INVT_JOINT_TORQUE_SENSOR_NOT_CHANGE_2,    // 0xFF12
    OPERATION_INVT_JOINT_TORQUE_SENSOR_COMPARE_SAME,    // 0xFF13
    OPERATION_INVT_CURRENT_UNBALANCE_ERROR,             // 0xFF14
    OPERATION_INVT_BOARD_OVER_TEMPERATURE_ERROR,        // 0xFF15
    OPERATION_INVT_BOARD_UNDER_TEMPERATURE_ERROR,       // 0xFF16
    OPERATION_INVT_INCREMENTAL_ENCODER_NO_COUNT,        // 0xFF17
    OPERATION_INVT_INC_ABS_POS_DIFFERENCE_ERROR,        // 0xFF18
    OPERATION_INVT_INC_ABS_SPEED_DIFFERENCE_ERROR,      // 0xFF19
    OPERATION_INVT_JTS_SEQ_NUNBER_ERROR,                // 0xFF1A
    OPERATION_INVT_JTS_CRC32_ERROR,                     // 0xFF1B
    OPERATION_INVT_INVAILD_EEPROM_PARAMETER,            // 0xFF20
    OPERATION_INVT_JOINT_TORQUE_SENSOR_NOT_CHANGE_3,    // 0xFF1C
    OPERATION_INVT_JOINT_TORQUE_SENSOR_NOT_CHANGE_4,    // 0xFF1D
    OPERATION_INVT_JOINT_TORQUE_SENSOR_NOT_CHANGE_5,    // 0xFF1E
    OPERATION_INVT_JOINT_TORQUE_SENSOR_NOT_CHANGE_6,    // 0xFF1F
};

//
// log code(eLOG_GROUP_SAFETY_CONTROLLER) enumerated value
//

enum {
    SAFETY_CONTROLLER_ERROR_NUMBER_START                  = 7000,
    OPERATION_RS422_SEQUENCE_NUMBER_ERROR                 = 7001,
    OPERATION_RS422_CRC32_CHECK_ERROR                     = 7002,
    OPERATION_RS422_UNKNOWN_COMMAND                       = 7003,
    OPERATION_RS422_COMMUNICATION_ERROR                   = 7004,
    OPERATION_ETHERCAT_COMMUNICATION_ERROR                = 7005,
    OPERATION_CROSS_CHECK_BUFFER_OVERFLOW_BETWEEN_CPUS    = 7006,
    OPERATION_HANDGUIDE_IS_NOT_ALLOWED                    = 7007,
    OPERATION_MOTION_CROSS_CHECK_ERROR_BETWEEN_CPUS       = 7008,
    OPERATION_MOTION_MONITORING_PERIOD_OVERUN             = 7009,
    OPERATION_EMG_INPUT_CROSS_CHECK_ERROR_BETWEEN_CPUS    = 7010,
    OPERATION_EMG_INPUT_BEYOND_VOLTAGE_RANGE              = 7011,
    OPERATION_PRS_INPUT_CROSS_CHECK_ERROR_BETWEEN_CPUS    = 7012,
    OPERATION_PRS_INPUT_BEYOND_VOLTAGE_RANGE              = 7013,
    OPERATION_SAFETY_OUT_CROSS_CHECK_ERROR_BETWEEN_CPUS   = 7014,
    OPERATION_SAFETY_OUT_FEEDBACK_DIFFENENT               = 7015,
    OPERATION_SAFETY_INPUT_CROSS_CHECK_ERROR_BETWEEN_CPUS = 7016,
    OPERATION_CROSS_CHECK_ERROR_SAFETY_STATE              = 7017,

    OPERATION_INVERTER_TEMP_BEYOND_RANGE                  = 7020,
    OPERATION_INVERTER_DATA_SEQUENCE_NUMBER_ERROR         = 7021,
    OPERATION_INVERTER_DATA_CRC32_CHECK_ERROR             = 7022,
    OPERATION_INVERTER_JTS_SEQUENCE_NUMBER_ERROR          = 7023,
    OPERATION_INVERTER_JTS_CRC32_CHECK_ERROR              = 7024,
#ifdef LOG_2_6
    OPERATION_MOTIONCONTROLLER_SEQUENCE_NUMBER_ERROR      = 7025,
    OPERATION_MOTIONCONTROLLER_CRC32_CHECK_ERROR          = 7026,
#endif
    OPERATION_INVERTER_ETEHERCAT_TIMEOUT_ERROR            = 7027,

    OPERATION_UNDEFINED_INSTRUCTION_EXCEPTION             = 7030,
    OPERATION_PREPATCH_ABORT_EXCEPTION                    = 7031,
    OPERATION_DATA_ABORT_EXCEPTION                        = 7032,

    OPERATION_EXCHANGE_DATA_SEQUENCE_ERROR                = 7040,
    OPERATION_EXCHANGE_DATA_CRC32_ERROR                   = 7041,
    OPERATION_EXCHANGE_CLEARCMD_SEQUENCE_ERROR            = 7042,
    OPERATION_EXCHANGE_CLEARCMD_CRC32_ERROR               = 7043,
    OPERATION_EXCHANGE_UPDATEDATA_SEQUENCE_ERROR          = 7044,
    OPERATION_EXCHANGE_UPDATEDATA_CRC32_ERROR             = 7045,
    OPERATION_EXCHANGE_INTREQ_ERROR                       = 7046,
    OPERATION_EXCHANGE_INTREQ_SEQUENCE_ERROR              = 7047,
    OPERATION_EXCHANGE_INTREQ_CRC32_ERROR                 = 7048,
    OPERATION_EXCHANGE_RS422_COMPARE_ERROR                = 7049,

    OPERATION_SAFETY_FUNCTION_STO                         = 7050,
    OPERATION_SAFETY_FUNCTION_RS1_VIOLATION               = 7051,
    OPERATION_SAFETY_FUNCTION_SS1_VIOLATION               = 7052,
    OPERATION_SAFETY_FUNCTION_SS2_VIOLATION               = 7053,
    OPERATION_SAFETY_FUNCTION_EMG_VIOLATION               = 7054,
    OPERATION_SAFETY_FUNCTION_PRS_VIOLATION               = 7055,
    OPERATION_SAFETY_FUNCTION_SOS_VIOLATION               = 7056,
    OPERATION_SAFETY_FUNCTION_JOINT_SLP_VIOLATION         = 7057,
    OPERATION_SAFETY_FUNCTION_JOINT_SLS_VIOLATION         = 7058,
    OPERATION_SAFETY_FUNCTION_JOINT_SLT_VIOLATION         = 7059,
    OPERATION_SAFETY_FUNCTION_COLLISION_VIOLATION         = 7060,
    OPERATION_SAFETY_FUNCTION_TCP_SLP_VIOLATION           = 7061,
    OPERATION_SAFETY_FUNCTION_TCP_ORIENTATION_VIOLATION   = 7062,
    OPERATION_SAFETY_FUNCTION_TCP_SLS_VIOLATION           = 7063,
    OPERATION_SAFETY_FUNCTION_TCP_FORCE_VIOLATION         = 7064,
    OPERATION_SAFETY_FUNCTION_MOMENTUM_VIOLATION          = 7065,
    OPERATION_SAFETY_FUNCTION_POWER_VIOLATION             = 7066,
    OPERATION_SAFETY_FUNCTION_SELF_BODY_COLLISION         = 7067,
    OPERATION_SAFETY_FUNCTION_PROTECTIVE_ZONE_VIOLATION   = 7068,
    OPERATION_SAFETY_FUNCTION_ENCODER_CMP_VIOLATION       = 7069,
    OPERATION_SAFETY_FUNCTION_JTS_CMP_VIOLATION           = 7070,
    OPERATION_SAFETY_FUNCTION_3_CURRENT_SUM_VIOLATION     = 7071,
    OPERATION_SAFETY_FUNCTION_CURRENT_2_TRQ_VIOLATION     = 7072,
    OPERATION_SAFETY_FUNCTION_JOINT_FOLLOWING_VIOLATION   = 7073,
	OPERATION_SAFETY_FUNCTION_NUDGE_VIOLATION   		  = 7074,

    OPERATION_INVERTER_1_2V_BEYOND_RANGE                  = 7080,
    OPERATION_INVERTER_3_3V_BEYOND_RANGE                  = 7081,
    OPERATION_INVERTER_5V_BEYOND_RANGE                    = 7082,
    OPERATION_INVERTER_17V_BEYOND_RANGE                   = 7083,
    OPERATION_INVERTER_24BV_BEYOND_RANGE                  = 7084,
    OPERATION_INVERTER_24CV_BEYOND_RANGE                  = 7085,
    OPERATION_INVERTER_48V_BEYOND_RANGE                   = 7086,

    OPERATION_DETECT_S24V_DEVIATION                       = 7090,
    OPERATION_DETECT_S6V_DEVIATION                        = 7091,
    OPERATION_DETECT_S5V_DEVIATION                        = 7092,
    OPERATION_DETECT_S3V3_DEVIATION                       = 7093,
    OPERATION_DETECT_S1V2_DEVIATION                       = 7094,
    OPERATION_DETECT_NS12V_DEVIATION                      = 7095,
    OPERATION_DETECT_NS5V_DEVIATION                       = 7096,
    OPERATION_DETECT_NS3V3_DEVIATION                      = 7097,
    OPERATION_DETECT_NS2V5_DEVIATION                      = 7098,
    OPERATION_DETECT_STO_RELAY_MALFUNCTION                = 7099,
    OPERATION_DETECT_EMF_DATA_BUS_MALFUNCTION             = 7100,
    OPERATION_DETECT_EMF_ADDRESS_BUS_MALFUNCTION          = 7101,
    OPERATION_DETECT_SRAM_RUNTIME_TEST_FAIL               = 7102,
    OPERATION_DETECT_SPI_2__BUS__MALFUNCTION              = 7103,
    OPERATION_DETECT_SPI_3__BUS__MALFUNCTION              = 7104,
    OPERATION_DETECT_CPU_TEMP_BEYOUN_RANGE                = 7105,
    OPERATION_DETECT_BOARD_TEMP_BEYOUN_RANGE              = 7106,
    OPERATION_DETECT_CPU_CLOCK_MALFUNCTION                = 7107,
    OPERATION_DETECT_MOTOR_SOLIDSTATE_CIRCUIT_BRAKE_MALFUNCTION = 7108,
    OPERATION_DETECT_BREAK_SOLIDSTATE_CIRCUIT_BRAKE_MALFUNCTION = 7109,
    OPERATION_DETECT_MOTOR48V_OVERVOLTAGE                 = 7110,
    OPERATION_DETECT_MOTOR48V_UNDERVOLTAGE                = 7111,
    OPERATION_DETECT_BRAKE24V_OVERVOLTAGE                 = 7112,
    OPERATION_DETECT_BRAKE24V_UNDERVOLTAGE                = 7113,
    OPERATION_DETECT_PRECHARGE_UNDERVOLTAGE               = 7114,
    OPERATION_DETECT_MOTOR_OVERCURRENT                    = 7115,
    OPERATION_DETECT_BRAKE_OVERCURRENT                    = 7116,
    OPERATION_DETECT_LOGIC_OVERCURRENT                    = 7117,
    OPERATION_DETECT_IO_OVERCURRENT                       = 7118,
    OPERATION_DETECT_MOTOR_FET_FALUT                      = 7119,
    OPERATION_DETECT_BRAKE_FET_FALUT                      = 7120,
    OPERATION_DETECT_PRECHARGE_OVERCURRENT                = 7121,
    OPERATION_DETECT_STO_RELAY_FAULT                      = 7122,
    OPERATION_DETECT_DISCREPANCY_MOTOR_CURRENT_A          = 7123,
    OPERATION_DETECT_DISCREPANCY_MOTOR_CURRENT_B          = 7124,
    OPERATION_DETECT_DISCREPANCY_BRAKE_VOLTAGE_A          = 7125,
    OPERATION_DETECT_DISCREPANCY_BRAKE_VOLTAGE_B          = 7126,
    OPERATION_DETECT_DISCREPANCY_MOTOR_VOLTAGE_A          = 7127,
    OPERATION_DETECT_DISCREPANCY_MOTOR_VOLTAGE_B          = 7128,
    OPERATION_DETECT_DISCREPANCY_BRAKE_CURRENT            = 7129,
    OPERATION_DETECT_WATCHDOG_ERROR                       = 7130,
    OPERATION_DETECT_CPU_UNDERTEMPERATURE                 = 7131,
    OPERATION_DETECT_BOARD_UNDERTEMPERATURE               = 7132,
    OPERATION_DETECT_CPU_OVERTEMPERATURE                  = 7133,
    OPERATION_DETECT_BOARD_OVERTEMPERATURE                = 7134,
    OPERATION_DETECT_CPU_SRAM_ECC_FAULT                   = 7135,
    OPERATION_DETECT_CPU_FLASH_ECC_FAULT                  = 7136,
    OPERATION_DETECT_CPU_FLASH_CRC_FAULT                  = 7137,
    OPERATION_DETECT_JTSSENSOR_FAULT                      = 7138,
    OPERATION_DETECT_MOTION_CAL_CMP_FAIL                  = 7139,
    OPERATION_DETECT_PRECHARGE_FET_FAULT                  = 7140,
    OPERATION_DETECT_IO5V_DEVIATION                       = 7141,

    OPERATION_PARAM_INVALID_SYSTEM_STATE                  = 7170,
    OPERATION_PARAM_INVALID_CURRENT_TOOL                  = 7171,
    OPERATION_PARAM_INVALID_CURRENT_TCP                   = 7172,
    OPERATION_PARAM_INVALID_GENERAL_RANGE                 = 7173,
    OPERATION_PARAM_INVALID_JOINT_RANGE                   = 7174,
    OPERATION_PARAM_INVALID_SAFETY_FUNCTION               = 7175,
    OPERATION_PARAM_INVALID_INSTALL_POSE                  = 7176,
    OPERATION_PARAM_INVALID_SAFETY_IO_SETTING             = 7177,
    OPERATION_PARAM_INVALID_VIRTUAL_WALL                  = 7178,
    OPERATION_PARAM_INVALID_SAFE_ZONE                     = 7179,
    OPERATION_PARAM_INVALID_SAFE_ZONE_ENABLE              = 7180,
    OPERATION_PARAM_INVALID_PROTECTED_ZONE                = 7181,
    OPERATION_PARAM_INVALID_COLLISION_MUTE_ZONE           = 7182,
    OPERATION_PARAM_INVALID_TOOL_ORIENTATION_LIMIT_ZONE   = 7183,
    OPERATION_PARAM_INVALID_TOOL_SHAPE                    = 7184,
    OPERATION_PARAM_INVALID_CONFIG_TOOL                   = 7185,
    OPERATION_PARAM_INVALID_CONFIG_TCP                    = 7186,
    OPERATION_PARAM_INVALID_NOT_EXIST_TOOL_SHAPE          = 7187,
    OPERATION_PARAM_FAILED_TO_SELECT_TOOL_SHAPE           = 7188,
    OPERATION_PARAM_FAILED_TO_DELETE_TOOL_SHAPE           = 7189,
    OPERATION_PARAM_FAILED_TO_ADD_SAFETY_ZONE             = 7190,
    OPERATION_PARAM_FAILED_TO_DELETE_SAFETY_ZONE          = 7191,
    OPERATION_INVALID_REMOTE_CONTROL_MODE_SINNAL          = 7192,

    OPERATION_DETECT_CPU_RESERVED1                        = 7240,
    OPERATION_DETECT_CPU_RESERVED2                        = 7241,
    OPERATION_DETECT_CPU_RESERVED3                        = 7242,
    OPERATION_DETECT_CPU_RESERVED4                        = 7243,
    OPERATION_DETECT_CPU_RESERVED5                        = 7244,
    OPERATION_DETECT_CPU_RESERVED6                        = 7245,
    OPERATION_DETECT_CPU_RESERVED7                        = 7246,
    OPERATION_DETECT_CPU_RESERVED8                        = 7247,
    OPERATION_DETECT_CPU_RESERVED9                        = 7248,
};

